from crabnlp.tg import Telegram
from crabnlp.maildb import get_onboarding, set_onboarding

ONBOARDING_STATE_EXPECTING_YOUTUBE = 'expecting_yt'
ONBOARDING_STATE_EXPECTING_QUESTION = 'expecting_question'
ONBOARDING_STATE_FINISHED = 'finished'

# duplicated same function from infomat.bot.py
def M(lang_to_message: dict, language, default_language='en'):
    if (resp := lang_to_message.get(language)):
        return resp
    else:
        return lang_to_message[default_language]
    

messages_onboarding_intro = {
    'ru': "üéì\n–°–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É –≤–∞–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Ç —Å—á–∞—Å—Ç—å—è –∏–∑ –≤–∏–¥–µ–æ https://www.youtube.com/watch?v=8KkKuTCFvzI , –Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –Ω–µ —Ö–æ—Ç–∏—Ç–µ.",
    'en': "üéì\nI'll show you how to use me. Let's imagine that you want to learn about the secret of happiness from the video https://www.youtube.com/watch?v=8KkKuTCFvzI , but don't want to watch the video."
}
messages_onboarding_copy = {
    'ru': """üéì\n–ü–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏—Å–ª–∞—Ç—å –µ–µ –º–Ω–µ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å.""",
    'en': "üéì\nThe first step is to copy the link and send it to me as a separate message.\n\nTry it now."
}
messages_onboarding_pinned = {
    'ru': """üéì\n–Ø –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ‚òùÔ∏è, —á—Ç–æ–±—ã –º—ã –Ω–µ –∑–∞–±—ã–≤–∞–ª–∏, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –æ–±—Å—É–∂–¥–∞–µ–º. –í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è üìù. –ù–æ –Ω–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å!""",
    'en': "üéì\nI've attached a message ‚òùÔ∏è so we don't forget which video we're discussing. This post has a button to request a summary üìù. But our goal is to get an answer to a specific question."
}
messages_onboarding_own_question = {
    'ru': """üéì\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É —Ä–æ–ª–∏–∫—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–π—á–∞—Å.""",
    'en': "üéì\nCome up with a question about this video and send it to me in a separate message. The answer will be in the language of the question.\n\nTry it now."
}
messages_onboarding_copy_question = {
    'ru': """üéì\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å: "–ö–∞–∫–æ–π –≥–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç —Å—á–∞—Å—Ç—å—è?" –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–π—á–∞—Å.""",
    'en': """üéì\nWrite me a separate message with the question: "What is the main secret of happiness?" The answer will be in the language of the question.\n\nTry it now."""
}


messages_onboarding_wording = {
    'ru': """üéì\n–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≤–∞–∂–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫ –≤–æ–ø—Ä–æ—Å—É –¥–æ–±–∞–≤–∏—Ç—å "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç", —Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ.""",
    'en': """üéì\nFormulation is important. For example, if you add "Detailed answer" to the question, then the answer will be more than a page on a smartphone."""
}
messages_onboarding_price = {
    'ru': """üéì\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–Ω–∞—á–∫–∞ üí∏ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–∏–¥–µ–æ. –í /help –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.""",
    'en': "üéì\nPay attention to the cost after the üí∏ emoji in the pinned message. This is the approximate cost of each video request. In /help you can find out more about how the cost is formed."
}
messages_onboarding_finished = {
    'ru': """üéì\n–ù–∞ —ç—Ç–æ–º –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –º–æ–∂–µ—Ç–µ –∏—Ö –∑–∞–¥–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ https://t.me/infomat_community –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help""",
    'en': "üéì\nThis completes the tutorial. If you have any questions, you can ask them in the support group https://t.me/infomat_community or use the /help command"
}


async def on_start(tg, user_id, lang: str, is_new: bool, logger=None):
    is_repeated = get_onboarding(user_id) is not None
    if is_repeated:
        set_onboarding(user_id, None)

    if logger:
        logger.info('onboarding', extra={'onboarding_state': 'started', 
                                         'chat_id': user_id, 'is_repeated': is_repeated})

    await tg.send_message_typing(chat_id=user_id, disable_web_page_preview=True,
                                 text=M(messages_onboarding_intro, lang))
        
    await tg.send_message_typing(chat_id=user_id,
                                 text=M(messages_onboarding_copy, lang))
    set_onboarding(user_id, ONBOARDING_STATE_EXPECTING_YOUTUBE)
    if logger:
        logger.info('onboarding', extra={'onboarding_state': ONBOARDING_STATE_EXPECTING_YOUTUBE, 
                                         'chat_id': user_id, 'is_repeated': is_repeated})


async def on_url_sent(tg: Telegram, user_id: int, update: dict, vid: str, lang: str, logger=None):
    if get_onboarding(user_id) != ONBOARDING_STATE_EXPECTING_YOUTUBE:
        return

    message = update['message']

    await tg.send_message_typing(chat_id=message['chat']['id'],
                                 text=M(messages_onboarding_pinned, lang))
    
    if vid != '8KkKuTCFvzI':
        await tg.send_message_typing(chat_id=message['chat']['id'],
                                     text=M(messages_onboarding_own_question, lang))
    else:
        await tg.send_message_typing(chat_id=message['chat']['id'],
                                     text=M(messages_onboarding_copy_question, lang))                            
        
    set_onboarding(user_id, ONBOARDING_STATE_EXPECTING_QUESTION)
    if logger:
        logger.info('onboarding', extra={'onboarding_state': ONBOARDING_STATE_EXPECTING_QUESTION, 
                                         'vid': vid, 'update': update, 'user_id': user_id})


async def on_question_answered(tg: Telegram, user_id: int, lang: str, logger=None):
    if get_onboarding(user_id) != ONBOARDING_STATE_EXPECTING_QUESTION:
        return
    
    await tg.send_message_typing(chat_id=user_id, text=M(messages_onboarding_wording, lang))
    
    chat_info = await tg.post('getChat', chat_id=user_id)
    if pinned := chat_info['result'].get('pinned_message'):
        reply_to_message_id = pinned.get('message_id')
    await tg.send_message_typing(chat_id=user_id, reply_to_message_id=reply_to_message_id,
                                 text=M(messages_onboarding_price, lang))

    await tg.send_message_typing(chat_id=user_id, text=M(messages_onboarding_finished, lang))
    
    set_onboarding(user_id, ONBOARDING_STATE_FINISHED)
    if logger:
        logger.info('onboarding', extra={'onboarding_state': ONBOARDING_STATE_FINISHED,
                                         'user_id': user_id})
